{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x542bbca61f882e300548f5a48f2422a48e4ab19a7f629b7445bca0effed57e3b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "927372",
    "logsBloom": "0x
    "blockHash": "0x8a84f643b9b9b067b5f3bd9bb72119915dac06086c7dbe1c526391af49bb109c",
    "transactionHash": "0x542bbca61f882e300548f5a48f2422a48e4ab19a7f629b7445bca0effed57e3b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "927372",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "d95ebb927bb067b1dda64a5f68ccbdab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n\\n  // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public s_addressToAmountFunded; \\n    address[] public s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n     modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        //modularizing the address===>> to dynamically populate data for chainlink\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    // function getVersion() public view returns (uint256){\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n    //     return priceFeed.version();\\n    // }\\n    \\n    function withdraw() public payable onlyOwner  {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\",\"keccak256\":\"0x27ff4bdea8c560bad4abd9c8f429d9ab8554a29c173bed426157978d77dbba65\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x56c9378d7789001f472a43948749bf3d65f9767e00851be35f86937c49312de3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162001058380380620010588339818101604052810190610034919061011f565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b610efc806200015c6000396000f3fe6080604052600436106100745760003560e01c806354861af71161004e57806354861af7146100ff5780636b69a5921461013c578063b60d428814610167578063dba6335f1461017157610083565b80630ec3b0271461008d5780631bf6132d146100b85780633ccfd60b146100f557610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100a26102d6565b6040516100af9190610850565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da91906108ae565b6102fc565b6040516100ec91906108f4565b60405180910390f35b6100fd610314565b005b34801561010b57600080fd5b506101266004803603810190610121919061093b565b6105dc565b6040516101339190610977565b60405180910390f35b34801561014857600080fd5b5061015161061b565b60405161015e91906108f4565b60405180910390f35b61016f61019c565b005b34801561017d57600080fd5b50610186610628565b6040516101939190610977565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461064e90919063ffffffff16565b101561021c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610213906109ef565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a9190610a3e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561041f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103d5575b5050505050905060005b81518110156104a957600082828151811061044757610446610a94565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a190610ac3565b915050610429565b50600067ffffffffffffffff8111156104c5576104c4610b0c565b5b6040519080825280602002602001820160405280156104f35781602001602082028036833780820191505090505b506001908051906020019061050992919061072a565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161055290610b6c565b60006040518083038185875af1925050503d806000811461058f576040519150601f19603f3d011682016040523d82523d6000602084013e610594565b606091505b50509050806105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610bcd565b60405180910390fd5b5050565b600181815481106105ec57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061065a8361068a565b90506000670de0b6b3a764000085836106739190610bed565b61067d9190610c76565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190610d34565b5050509150506402540be400816107229190610daf565b915050919050565b8280548282559060005260206000209081019282156107a3579160200282015b828111156107a25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074a565b5b5090506107b091906107b4565b5090565b5b808211156107cd5760008160009055506001016107b5565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061081661081161080c846107d1565b6107f1565b6107d1565b9050919050565b6000610828826107fb565b9050919050565b600061083a8261081d565b9050919050565b61084a8161082f565b82525050565b60006020820190506108656000830184610841565b92915050565b600080fd5b600061087b826107d1565b9050919050565b61088b81610870565b811461089657600080fd5b50565b6000813590506108a881610882565b92915050565b6000602082840312156108c4576108c361086b565b5b60006108d284828501610899565b91505092915050565b6000819050919050565b6108ee816108db565b82525050565b600060208201905061090960008301846108e5565b92915050565b610918816108db565b811461092357600080fd5b50565b6000813590506109358161090f565b92915050565b6000602082840312156109515761095061086b565b5b600061095f84828501610926565b91505092915050565b61097181610870565b82525050565b600060208201905061098c6000830184610968565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b60006109d9601b83610992565b91506109e4826109a3565b602082019050919050565b60006020820190508181036000830152610a08816109cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a49826108db565b9150610a54836108db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8957610a88610a0f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ace826108db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0157610b00610a0f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b56600083610b3b565b9150610b6182610b46565b600082019050919050565b6000610b7782610b49565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bb7600b83610992565b9150610bc282610b81565b602082019050919050565b60006020820190508181036000830152610be681610baa565b9050919050565b6000610bf8826108db565b9150610c03836108db565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c3c57610c3b610a0f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c81826108db565b9150610c8c836108db565b925082610c9c57610c9b610c47565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610cc681610ca7565b8114610cd157600080fd5b50565b600081519050610ce381610cbd565b92915050565b6000819050919050565b610cfc81610ce9565b8114610d0757600080fd5b50565b600081519050610d1981610cf3565b92915050565b600081519050610d2e8161090f565b92915050565b600080600080600060a08688031215610d5057610d4f61086b565b5b6000610d5e88828901610cd4565b9550506020610d6f88828901610d0a565b9450506040610d8088828901610d1f565b9350506060610d9188828901610d1f565b9250506080610da288828901610cd4565b9150509295509295909350565b6000610dba82610ce9565b9150610dc583610ce9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e0457610e03610a0f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e4157610e40610a0f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e7e57610e7d610a0f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ebb57610eba610a0f565b5b82820290509291505056fea2646970667358221220d2e79251514361af2e8f735ddf609405ccda27ddc6cdf28096675bcc4a49cdad64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c806354861af71161004e57806354861af7146100ff5780636b69a5921461013c578063b60d428814610167578063dba6335f1461017157610083565b80630ec3b0271461008d5780631bf6132d146100b85780633ccfd60b146100f557610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100a26102d6565b6040516100af9190610850565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da91906108ae565b6102fc565b6040516100ec91906108f4565b60405180910390f35b6100fd610314565b005b34801561010b57600080fd5b506101266004803603810190610121919061093b565b6105dc565b6040516101339190610977565b60405180910390f35b34801561014857600080fd5b5061015161061b565b60405161015e91906108f4565b60405180910390f35b61016f61019c565b005b34801561017d57600080fd5b50610186610628565b6040516101939190610977565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461064e90919063ffffffff16565b101561021c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610213906109ef565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a9190610a3e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561041f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103d5575b5050505050905060005b81518110156104a957600082828151811061044757610446610a94565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a190610ac3565b915050610429565b50600067ffffffffffffffff8111156104c5576104c4610b0c565b5b6040519080825280602002602001820160405280156104f35781602001602082028036833780820191505090505b506001908051906020019061050992919061072a565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161055290610b6c565b60006040518083038185875af1925050503d806000811461058f576040519150601f19603f3d011682016040523d82523d6000602084013e610594565b606091505b50509050806105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610bcd565b60405180910390fd5b5050565b600181815481106105ec57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061065a8361068a565b90506000670de0b6b3a764000085836106739190610bed565b61067d9190610c76565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190610d34565b5050509150506402540be400816107229190610daf565b915050919050565b8280548282559060005260206000209081019282156107a3579160200282015b828111156107a25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074a565b5b5090506107b091906107b4565b5090565b5b808211156107cd5760008160009055506001016107b5565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061081661081161080c846107d1565b6107f1565b6107d1565b9050919050565b6000610828826107fb565b9050919050565b600061083a8261081d565b9050919050565b61084a8161082f565b82525050565b60006020820190506108656000830184610841565b92915050565b600080fd5b600061087b826107d1565b9050919050565b61088b81610870565b811461089657600080fd5b50565b6000813590506108a881610882565b92915050565b6000602082840312156108c4576108c361086b565b5b60006108d284828501610899565b91505092915050565b6000819050919050565b6108ee816108db565b82525050565b600060208201905061090960008301846108e5565b92915050565b610918816108db565b811461092357600080fd5b50565b6000813590506109358161090f565b92915050565b6000602082840312156109515761095061086b565b5b600061095f84828501610926565b91505092915050565b61097181610870565b82525050565b600060208201905061098c6000830184610968565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b60006109d9601b83610992565b91506109e4826109a3565b602082019050919050565b60006020820190508181036000830152610a08816109cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a49826108db565b9150610a54836108db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8957610a88610a0f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ace826108db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0157610b00610a0f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b56600083610b3b565b9150610b6182610b46565b600082019050919050565b6000610b7782610b49565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bb7600b83610992565b9150610bc282610b81565b602082019050919050565b60006020820190508181036000830152610be681610baa565b9050919050565b6000610bf8826108db565b9150610c03836108db565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c3c57610c3b610a0f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c81826108db565b9150610c8c836108db565b925082610c9c57610c9b610c47565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610cc681610ca7565b8114610cd157600080fd5b50565b600081519050610ce381610cbd565b92915050565b6000819050919050565b610cfc81610ce9565b8114610d0757600080fd5b50565b600081519050610d1981610cf3565b92915050565b600081519050610d2e8161090f565b92915050565b600080600080600060a08688031215610d5057610d4f61086b565b5b6000610d5e88828901610cd4565b9550506020610d6f88828901610d0a565b9450506040610d8088828901610d1f565b9350506060610d9188828901610d1f565b9250506080610da288828901610cd4565b9150509295509295909350565b6000610dba82610ce9565b9150610dc583610ce9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e0457610e03610a0f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e4157610e40610a0f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e7e57610e7d610a0f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ebb57610eba610a0f565b5b82820290509291505056fea2646970667358221220d2e79251514361af2e8f735ddf609405ccda27ddc6cdf28096675bcc4a49cdad64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}